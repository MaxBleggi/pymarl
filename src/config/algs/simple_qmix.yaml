# --- QMIX specific parameters ---

# use epsilon greedy action selector
action_selector: "epsilon_greedy"
epsilon_start: 1.0
epsilon_finish: 0.05
epsilon_anneal_time: 50000

buffer_size: 5000

# update the target network every {} episodes
target_update_interval: 200

# use the Q_Learner to train
agent_output_type: "q"
learner: "q_learner"
double_q: True
mixer: "qmix"
mixing_embed_dim: 32
hypernet_layers: 2
hypernet_embed: 64

# model learning
model_learner: "simple_learner"
model_rollout_batch_size: 32 # batch of real starts sampled from replay buffer
model_rollouts: 256 # number of synthetic rollouts to generate
model_policy_improvement_steps: 10
model_training_test_ratio: 0.1

# environment state model learning
state_model_train_epochs: 50
state_model_train_log_epochs: 10
state_model_train_batch_size: 32
state_model_learning_rate: 0.01
state_model_grad_clip_norm: 1
state_model_hidden_dim: 64

# environment observation model learning
obs_model_train_epochs: 100
obs_model_train_log_epochs: 10
obs_model_train_batch_size: 32
obs_model_learning_rate: 0.01
obs_model_grad_clip_norm: 1
obs_model_hidden_dim: 128

# this is independent from to env_args["obs_last_action"] and is used to improve state to obs modelling and is
# always available during centralised training
obs_model_include_last_action: True
obs_model_use_mask: True # there are no obs after termination so may as well exclude learning those timesteps

name: "simple_qmix"
